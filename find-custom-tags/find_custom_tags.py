#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ–≥–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤.
–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã prodN.yml –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —É–∫–∞–∑–∞–Ω–∏—è tag:
"""

import os
import sys
import argparse
import re
from typing import List, Dict, Tuple
from pathlib import Path


class ProductionTagScanner:
    def __init__(self, search_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞.
        
        Args:
            search_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤
        """
        self.search_path = Path(search_path)
        self.results: List[Dict] = []
    
    def is_prod_file(self, filename: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º –ø—Ä–æ–¥–∞–∫—à–Ω–∞.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª –ø—Ä–æ–¥–∞–∫—à–Ω–∞ (prodN.yml)
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω: prod<—á–∏—Å–ª–æ>.yml –∏–ª–∏ prod<—á–∏—Å–ª–æ>.yaml
        pattern = r'^prod\d+\.(yml|yaml)$'
        return bool(re.match(pattern, filename, re.IGNORECASE))
    
    def extract_tags(self, file_path: Path) -> List[Tuple[int, str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å tag: –∏–∑ —Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏, –∑–Ω–∞—á–µ–Ω–∏–µ_—Ç–µ–≥–∞)
        """
        tags = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "tag:" (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ—Ç—Å—Ç—É–ø–æ–≤)
                    # –ü–∞—Ç—Ç–µ—Ä–Ω: –ª—é–±—ã–µ –ø—Ä–æ–±–µ–ª—ã, tag:, –ª—é–±—ã–µ –ø—Ä–æ–±–µ–ª—ã, –∑–Ω–∞—á–µ–Ω–∏–µ
                    match = re.search(r'^\s*tag:\s*(.+?)\s*$', line)
                    if match:
                        tag_value = match.group(1).strip()
                        tags.append((line_num, tag_value))
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return tags
    
    def scan_directory(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∏—â–µ—Ç —Ç–µ–≥–∏ –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤."""
        if not self.search_path.exists():
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å {self.search_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            sys.exit(1)
        
        if not self.search_path.is_dir():
            print(f"‚ùå –û—à–∏–±–∫–∞: {self.search_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
            sys.exit(1)
        
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.search_path.absolute()}")
        print("=" * 70)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤
        prod_files = []
        
        for item in self.search_path.iterdir():
            if item.is_file() and self.is_prod_file(item.name):
                prod_files.append(item)
        
        if not prod_files:
            print("\n‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–∞ (prod*.yml)")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
        prod_files.sort()
        
        print(f"\n‚úì –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤: {len(prod_files)}\n")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        total_tags = 0
        
        for prod_file in prod_files:
            tags = self.extract_tags(prod_file)
            
            if tags:
                result = {
                    'file': prod_file.name,
                    'path': str(prod_file.absolute()),
                    'tags': tags
                }
                self.results.append(result)
                total_tags += len(tags)
        
        self.total_files = len(prod_files)
        self.files_with_tags = len(self.results)
        self.total_tags = total_tags
    
    def print_report(self, detailed: bool = True) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–≥–∞—Ö.
        
        Args:
            detailed: –ï—Å–ª–∏ True, –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫
        """
        if not self.results:
            print("\n‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤")
            return
        
        print("\n" + "=" * 70)
        print("üìã –û–¢–ß–ï–¢: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–≥–∏")
        print("=" * 70)
        
        for idx, result in enumerate(self.results, 1):
            print(f"\n{'‚îÄ' * 70}")
            print(f"üìÑ –§–∞–π–ª #{idx}: {result['file']}")
            print(f"   –ü—É—Ç—å: {result['path']}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: {len(result['tags'])}")
            print(f"{'‚îÄ' * 70}")
            
            for line_num, tag_value in result['tags']:
                if detailed:
                    print(f"   –°—Ç—Ä–æ–∫–∞ {line_num:>4}: tag: {tag_value}")
                else:
                    print(f"   tag: {tag_value}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 70)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 70)
        print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤: {self.total_files}")
        print(f"   –§–∞–π–ª–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏: {self.files_with_tags}")
        print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: {self.total_tags}")
        print("=" * 70)
    
    def export_to_file(self, output_file: str, format: str = 'txt') -> None:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª.
        
        Args:
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            format: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ ('txt', 'csv', 'md')
        """
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                if format == 'txt':
                    self._export_txt(f)
                elif format == 'csv':
                    self._export_csv(f)
                elif format == 'md':
                    self._export_markdown(f)
                else:
                    print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {format}")
                    return
            
            print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _export_txt(self, f) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç."""
        f.write("=" * 70 + "\n")
        f.write("–û–¢–ß–ï–¢: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–≥–∏ –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤\n")
        f.write("=" * 70 + "\n\n")
        
        if not self.results:
            f.write("–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n")
            return
        
        for result in self.results:
            f.write(f"–§–∞–π–ª: {result['file']}\n")
            f.write(f"–ü—É—Ç—å: {result['path']}\n")
            f.write("-" * 70 + "\n")
            
            for line_num, tag_value in result['tags']:
                f.write(f"  –°—Ç—Ä–æ–∫–∞ {line_num}: tag: {tag_value}\n")
            
            f.write("\n")
        
        f.write("=" * 70 + "\n")
        f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
        f.write("=" * 70 + "\n")
        f.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤: {self.total_files}\n")
        f.write(f"–§–∞–π–ª–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏: {self.files_with_tags}\n")
        f.write(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: {self.total_tags}\n")
    
    def _export_csv(self, f) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç."""
        f.write("–§–∞–π–ª,–ü—É—Ç—å,–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏,–¢–µ–≥\n")
        
        for result in self.results:
            for line_num, tag_value in result['tags']:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                tag_escaped = tag_value.replace('"', '""')
                if ',' in tag_escaped:
                    tag_escaped = f'"{tag_escaped}"'
                
                f.write(f"{result['file']},{result['path']},{line_num},{tag_escaped}\n")
    
    def _export_markdown(self, f) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown —Ñ–æ—Ä–º–∞—Ç."""
        f.write("# –û—Ç—á–µ—Ç: –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–≥–∏ –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤\n\n")
        
        if not self.results:
            f.write("**–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n")
            return
        
        f.write("## –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏\n\n")
        
        for result in self.results:
            f.write(f"### üìÑ {result['file']}\n\n")
            f.write(f"**–ü—É—Ç—å:** `{result['path']}`\n\n")
            f.write(f"**–ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤:** {len(result['tags'])}\n\n")
            
            f.write("| –°—Ç—Ä–æ–∫–∞ | –¢–µ–≥ |\n")
            f.write("|--------|-----|\n")
            
            for line_num, tag_value in result['tags']:
                f.write(f"| {line_num} | `{tag_value}` |\n")
            
            f.write("\n")
        
        f.write("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        f.write(f"- **–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤:** {self.total_files}\n")
        f.write(f"- **–§–∞–π–ª–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏:** {self.files_with_tags}\n")
        f.write(f"- **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤:** {self.total_tags}\n")


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description='–ü–æ–∏—Å–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–µ–≥–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤ (prodN.yml)',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  %(prog)s .

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  %(prog)s /path/to/production/configs

  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
  %(prog)s /path/to/configs -o report.txt

  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV
  %(prog)s /path/to/configs -o report.csv -f csv

  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown
  %(prog)s /path/to/configs -o report.md -f md

  # –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (–±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫)
  %(prog)s /path/to/configs --brief
        """
    )
    
    parser.add_argument(
        'path',
        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–¥–∞–∫—à–Ω–æ–≤'
    )
    
    parser.add_argument(
        '-o', '--output',
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª'
    )
    
    parser.add_argument(
        '-f', '--format',
        choices=['txt', 'csv', 'md'],
        default='txt',
        help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: txt)'
    )
    
    parser.add_argument(
        '-b', '--brief',
        action='store_true',
        help='–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫'
    )
    
    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='–ù–µ –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω (—Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª)'
    )
    
    return parser.parse_args()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    args = parse_arguments()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
    scanner = ProductionTagScanner(args.path)
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    scanner.scan_directory()
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --quiet)
    if not args.quiet:
        scanner.print_report(detailed=not args.brief)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if args.output:
        scanner.export_to_file(args.output, args.format)


if __name__ == '__main__':
    main()
