#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞—Ö.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥–∞—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å.
"""

import sys
import argparse
import re
from typing import Dict, Set
from pathlib import Path
from collections import defaultdict


class ServiceFinder:
    def __init__(self, search_path: str, service_filter: str = None):
        self.search_path = Path(search_path)
        self.service_filter = service_filter
        self.services_by_prod: Dict[str, Set[str]] = defaultdict(set)  # {service: {prods}}
        self.prods_by_service: Dict[str, Set[str]] = defaultdict(set)  # {prod: {services}}
        
    def is_yml_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª yml/yaml —Ñ–∞–π–ª–æ–º."""
        pattern = r'^.+\.(yml|yaml)$'
        return bool(re.match(pattern, filename, re.IGNORECASE))
    
    def extract_file_name(self, filename: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–∏–º—è –ø—Ä–æ–¥–∞)."""
        name_without_ext = re.sub(r'\.(yml|yaml)$', '', filename, flags=re.IGNORECASE)
        return name_without_ext if name_without_ext else "unknown"
    
    def matches_service_filter(self, service_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å —Ñ–∏–ª—å—Ç—Ä—É."""
        if not self.service_filter:
            return True
        return self.service_filter.lower() in service_name.lower()
    
    def extract_services(self, file_path: Path, prod_name: str) -> None:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
        in_services_block = False
        services_indent = -1
        current_service_indent = -1
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
                for line in lines:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    if not line.strip() or line.strip().startswith('#'):
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞
                    line_indent = len(line) - len(line.lstrip())
                    
                    # –ò—â–µ–º –±–ª–æ–∫ services:
                    if re.match(r'^services:\s*$', line.strip()):
                        in_services_block = True
                        services_indent = line_indent
                        continue
                    
                    # –ï—Å–ª–∏ –º—ã –≤ –±–ª–æ–∫–µ services
                    if in_services_block:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–∏ –ª–∏ –º—ã –∏–∑ –±–ª–æ–∫–∞ services
                        if line_indent <= services_indent and line.strip().endswith(':'):
                            if not line.strip().startswith('-'):
                                in_services_block = False
                                continue
                        
                        # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
                        service_match = re.match(r'^(\s*)(-\s*)?([a-zA-Z0-9_-]+):\s*$', line)
                        if service_match:
                            indent = len(service_match.group(1))
                            service_name = service_match.group(3)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–µ—Ä–≤–∏—Å (–Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∂–µ services)
                            if indent > services_indent:
                                if current_service_indent == -1 or indent <= current_service_indent:
                                    current_service_indent = indent
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
                                    self.services_by_prod[service_name].add(prod_name)
                                    self.prods_by_service[prod_name].add(service_name)
                            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}", file=sys.stderr)
    
    def scan_directory(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å yml —Ñ–∞–π–ª–∞–º–∏."""
        if not self.search_path.exists():
            print(f"‚ùå –ü—É—Ç—å {self.search_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            sys.exit(1)
        
        if not self.search_path.is_dir():
            print(f"‚ùå {self.search_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
            sys.exit(1)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ yml —Ñ–∞–π–ª—ã
        yml_files = [f for f in self.search_path.iterdir() 
                     if f.is_file() and self.is_yml_file(f.name)]
        
        if not yml_files:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ yml/yaml —Ñ–∞–π–ª–æ–≤")
            sys.exit(0)
        
        self.total_files_scanned = len(yml_files)
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for yml_file in yml_files:
            prod_name = self.extract_file_name(yml_file.name)
            self.extract_services(yml_file, prod_name)
    
    def print_prods_with_service(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º."""
        if not self.service_filter:
            print("‚ö†Ô∏è  –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø–æ–º–æ—â—å—é -s")
            return
        
        matched_services = {s: prods for s, prods in self.services_by_prod.items() 
                          if self.matches_service_filter(s)}
        
        if not matched_services:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ '{self.service_filter}', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.total_files_scanned}")
            return
        
        print("=" * 80)
        print(f"üåç –ü—Ä–æ–¥—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º (–ø–æ–∏—Å–∫: '{self.service_filter}')")
        print("=" * 80)
        print()
        
        for service in sorted(matched_services.keys()):
            prods = sorted(matched_services[service])
            print(f"üì¶ –°–µ—Ä–≤–∏—Å: {service}")
            print(f"   –ù–∞–π–¥–µ–Ω –Ω–∞ {len(prods)} –ø—Ä–æ–¥–µ(–∞—Ö):")
            print()
            
            for prod in prods:
                print(f"   ‚Ä¢ {prod}")
            print()
        
        print("=" * 80)
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.total_files_scanned}")
        print("=" * 80)
    
    def print_services_on_prod(self, prod_name: str) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–¥–µ."""
        if prod_name not in self.prods_by_service:
            print(f"‚ùå –ü—Ä–æ–¥ '{prod_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            available_prods = sorted(self.prods_by_service.keys())[:10]
            if available_prods:
                print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—ã (–ø–µ—Ä–≤—ã–µ 10):")
                for p in available_prods:
                    print(f"  ‚Ä¢ {p}")
            return
        
        services = sorted(self.prods_by_service[prod_name])
        
        print("=" * 80)
        print(f"üìã –°–µ—Ä–≤–∏—Å—ã –Ω–∞ –ø—Ä–æ–¥–µ: {prod_name}")
        print("=" * 80)
        print()
        
        for service in services:
            print(f"  ‚Ä¢ {service}")
        
        print()
        print(f"–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(services)}")
        print("=" * 80)
    
    def print_services_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º."""
        if not self.services_by_prod:
            print("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("=" * 80)
        print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º")
        print("=" * 80)
        print()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_services = sorted(self.services_by_prod.items(), 
                                key=lambda x: (len(x[1]), x[0]), 
                                reverse=True)
        
        print(f"{'–°–µ—Ä–≤–∏—Å':<40} {'–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–æ–≤':>15}")
        print("-" * 80)
        
        for service, prods in sorted_services:
            prod_count = len(prods)
            print(f"{service:<40} {prod_count:>15}")
        
        print()
        print("=" * 80)
        print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {len(self.services_by_prod)}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–æ–≤: {len(self.prods_by_service)}")
        print("=" * 80)
    
    def print_prods_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥–∞–º."""
        if not self.prods_by_service:
            print("‚ùå –ü—Ä–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("=" * 80)
        print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥–∞–º")
        print("=" * 80)
        print()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_prods = sorted(self.prods_by_service.items(), 
                             key=lambda x: (len(x[1]), x[0]), 
                             reverse=True)
        
        print(f"{'–ü—Ä–æ–¥':<40} {'–ö–æ–ª-–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤':>15}")
        print("-" * 80)
        
        for prod, services in sorted_prods:
            service_count = len(services)
            print(f"{prod:<40} {service_count:>15}")
        
        print()
        print("=" * 80)
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–æ–≤: {len(self.prods_by_service)}")
        print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {len(self.services_by_prod)}")
        print("=" * 80)
    
    def export_to_csv(self, output_file: str, mode: str = 'services') -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV."""
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                if mode == 'services':
                    # –§–æ—Ä–º–∞—Ç: service,prod
                    f.write("service,prod\n")
                    for service, prods in sorted(self.services_by_prod.items()):
                        for prod in sorted(prods):
                            f.write(f"{service},{prod}\n")
                
                elif mode == 'prods':
                    # –§–æ—Ä–º–∞—Ç: prod,service
                    f.write("prod,service\n")
                    for prod, services in sorted(self.prods_by_service.items()):
                        for service in sorted(services):
                            f.write(f"{prod},{service}\n")
                
                elif mode == 'summary':
                    # –§–æ—Ä–º–∞—Ç: service,prod_count
                    f.write("service,prod_count\n")
                    sorted_services = sorted(self.services_by_prod.items(), 
                                           key=lambda x: len(x[1]), 
                                           reverse=True)
                    for service, prods in sorted_services:
                        f.write(f"{service},{len(prods)}\n")
            
            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", file=sys.stderr)


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
    parser = argparse.ArgumentParser(
        description='–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞—Ö',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ù–∞–π—Ç–∏, –Ω–∞ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥–∞—Ö –µ—Å—Ç—å operator_api
  %(prog)s /path/to/configs -s operator_api
  
  # –ù–∞–π—Ç–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "api"
  %(prog)s /path/to/configs -s api
  
  # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–¥–µ
  %(prog)s /path/to/configs --prod prod123
  
  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º
  %(prog)s /path/to/configs --services-summary
  
  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥–∞–º
  %(prog)s /path/to/configs --prods-summary
  
  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV
  %(prog)s /path/to/configs -s operator_api -o report.csv
  %(prog)s /path/to/configs --services-summary -o summary.csv --csv-mode summary
        """
    )
    
    parser.add_argument('path', help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å yml/yaml —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–¥–æ–≤')
    parser.add_argument('-s', '--service', dest='service_filter',
                       help='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ–∏—Å–∫ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é)')
    parser.add_argument('--prod', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–¥–µ')
    parser.add_argument('--services-summary', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–µ—Ä–≤–∏—Å–∞–º')
    parser.add_argument('--prods-summary', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥–∞–º')
    parser.add_argument('-o', '--output', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV —Ñ–∞–π–ª')
    parser.add_argument('--csv-mode', choices=['services', 'prods', 'summary'],
                       default='services',
                       help='–†–µ–∂–∏–º —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: services (–ø–æ —Å–µ—Ä–≤–∏—Å–∞–º), prods (–ø–æ –ø—Ä–æ–¥–∞–º), summary (—Å–≤–æ–¥–∫–∞)')
    
    return parser.parse_args()


def main():
    args = parse_arguments()
    
    finder = ServiceFinder(args.path, args.service_filter)
    finder.scan_directory()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    if args.prod:
        finder.print_services_on_prod(args.prod)
    elif args.services_summary:
        finder.print_services_summary()
        if args.output:
            finder.export_to_csv(args.output, 'summary')
    elif args.prods_summary:
        finder.print_prods_summary()
    elif args.service_filter:
        finder.print_prods_with_service()
        if args.output:
            finder.export_to_csv(args.output, args.csv_mode)
    else:
        print("‚ö†Ô∏è  –£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        print("  -s SERVICE        - –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º")
        print("  --prod PROD       - –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –Ω–∞ –ø—Ä–æ–¥–µ")
        print("  --services-summary - —Å–≤–æ–¥–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")
        print("  --prods-summary   - —Å–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–º")
        sys.exit(1)


if __name__ == '__main__':
    main()